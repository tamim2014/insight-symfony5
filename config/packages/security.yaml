security:
    # Pour cacher les mot de passe
    encoders:
       App\Entity\User:
          algorithm: bcrypt 
    # peut être active l'authentification dans la barre d'outils symfony en bas      
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    # LES UTILISATEURS( providers )
    providers:
        users_in_memory: { memory: null }
        # AUTHENTIFICATION: On ajoute les utilisateurs enregistrés dans la BD
        users_in_database:
             entity:
               class: App\Entity\User
               property: email
    # LES PROTECTIONS(firewalls)
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            # Ici on laisse passer tout utilisateur venant du Disque Dur(ça fait trop !)
            # provider: users_in_memory
            # CONNEXION: On laisse passer seulement les utilisateurs inscrits dans la BD
            provider: users_in_database

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true # Que fait switch_user ? changer d'utilisateur sans se deconnecter
            # Mon mode d'authentification ce sera un formulaire de login
            form_login:
                login_path: connexion
                check_path: connexion
            # Pour la deconnection
            logout:
                path: connexion
                target: connexion # ici i fo mettre le name path de la page d'accueil ou c q on veut !

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
